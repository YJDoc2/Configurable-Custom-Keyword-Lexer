use crate::lexer;
use crate::tokens;
use crate::config::LangConfig;
use crate::ast::*;
use tokens::Token::*;

grammar(lc:&LangConfig);

pub program:AST = {
    stmts => AST{top_block:Block{stmts:<>}}
}

block:Block ={
    "{" <stmts> "}" => Block{stmts:<>},
}

stmt:Stmt = {
    <print_stmt> ";"? ,
    <let_stmt> ";"? ,
    <if_stmt>,
}

stmts:Vec<Stmt> = {
    <s:stmt> => vec![s],
    <mut s:stmts> <n:stmt> => {s.push(n);s},
}


if_stmt:Stmt = {
    IfStart <ifa1:IfAux1?> "(" <c:condition> ")" <ifa2:IfAux2?> <b1:block> <els:ElseStart?> <ea1:ElseAux1?> <b2:block?>=>{
        if !lc.is_optional(IfAux1) && ifa1.is_none(){
            panic!("Error, if aux 1 required");
        }
        if !lc.is_optional(IfAux2) && ifa2.is_none(){
            panic!("Error, if aux 2 required");
        }
        
        // else section
        let else_blk;

        if els.is_some(){
            if !lc.is_optional(ElseAux1) && ea1.is_none(){
                panic!("Error, else aux 1 required");
            }
            if b2.is_none(){
                panic!("A block is required for else statements");
            }
            else_blk = b2.unwrap();
        }else{
            else_blk = Block{stmts:vec![]};
        }
        return Stmt::If(IfStmt{cond:c,if_blk:b1,else_blk:else_blk});
    }
}

print_stmt:Stmt = {
    PrintStart "(" <v:expr> ")" <e:PrintEnd?> =>{
        if !lc.is_optional(PrintEnd) && e.is_none(){
            panic!("Error, print end required");
        }
        return Stmt::Print(PrintStmt{arg:v});
    }
}

let_stmt:Stmt = {
    LetStart <name:ID> "=" <v:expr> =>{
        if let ID(name) = name{
            return Stmt::Decl(Decl{name:name,value:v});
        }else{
            unreachable!();
        }
        
    }
}

condition:Condition = {
    <c1:condition> "&&" <c2:unary_condition> => Condition::LogicalOp(Box::new(c1),LogicalOp::And,Box::new(c2)),
    <c1:condition> "||" <c2:unary_condition> => Condition::LogicalOp(Box::new(c1),LogicalOp::Or,Box::new(c2)),
    <unary_condition>
}

unary_condition:Condition ={
    <comparison>,
    "!"<c:unary_condition> => Condition::Not(Box::new(c)),
}

comparison:Condition = {
    <e1:expr> "<"  <e2:expr> => Condition::Comparison(e1,ComparisonOp::LT,e2),
    <e1:expr> ">"  <e2:expr> => Condition::Comparison(e1,ComparisonOp::GT,e2),
    <e1:expr> "<=" <e2:expr> => Condition::Comparison(e1,ComparisonOp::LTE,e2),
    <e1:expr> ">=" <e2:expr> => Condition::Comparison(e1,ComparisonOp::GTE,e2),
    <e1:expr> "!=" <e2:expr> => Condition::Comparison(e1,ComparisonOp::NotEq,e2),
    <e1:expr> "==" <e2:expr> => Condition::Comparison(e1,ComparisonOp::Eq,e2),
}


expr:Expr = {
    <e:expr> "+" <f:factor> => Expr::Op(Box::new(e),Operator::Add,Box::new(f)),
    <e:expr> "-" <f:factor> => Expr::Op(Box::new(e),Operator::Sub,Box::new(f)),
    <factor>,
}

factor:Expr = {
    <f:factor> "*" <n:value> => Expr::Op(Box::new(f),Operator::Mul,Box::new(n)),
    <f:factor> "/" <n:value> => Expr::Op(Box::new(f),Operator::Div,Box::new(n)),
    <value>
}

value:Expr = {
    <num>,
    <id>,
    <str_lit>
}

id:Expr = {
    ID =>{
        if let ID(t) = <> {
            return Expr::Val(Value::Id(t));
        }else{
            return Expr::Val(Value::Id("".to_owned()));
        }
    }

}

str_lit:Expr = {
    StrLit =>{
        if let StringVal(t) = <> {
            return Expr::Val(Value::Sval(t));
        }else{
            return Expr::Val(Value::Sval("".to_owned()));
        }
    }

}

num:Expr = {
    Num => {
        if let Number(t) = <> {
            return Expr::Val(Value::Nval(t.parse().unwrap()));
        }else{
            return Expr::Val(Value::Nval(0.0));
        }
    },
    "(" <expr> ")"
}

extern{
    type Location = usize;
    type Error = lexer::LexerError;
    
    enum tokens::Token{
        ID =>  ID(_),
        Num => Number(_),
        StrLit => StringVal(_),

        "(" => OpenRoundBrack,
        ")" => CloseRoundBrack,
        "{" => OpenCurlyBrack,
        "}" => CloseCurlyBrack,
        ";" => SemiColon,
        "," => Comma,

        "+" => Plus,
        "-" => Minus,
        "*" => Mul,
        "/" => Div,
        "=" => Eq,
        "==" => EqEq,

        "<" => LessThan,
        "<=" => LessThanEq,
        ">" => GreaterThan,
        ">=" => GreaterThanEq,
        "!" => Not,
        "!=" => NotEq,
        "||" => Or,
        "&&" => And,
    
        PrintStart => PrintStart,
        PrintEnd => PrintEnd,

        LetStart => LetStart,

        ForStart => ForStart,
        ForAux1 => ForAux1,
        ForAux2 => ForAux2,
        In => In,
        ForAux3 => ForAux3,
        ForAux4 => ForAux4,

        IfStart => IfStart,
        IfAux1 => IfAux1,
        IfAux2 => IfAux2,
        ElseStart => ElseStart,
        ElseAux1 => ElseAux1,

        WhileStart => WhileStart,
        WhileAux1 => WhileAux1,
        WhileAux2 => WhileAux2,
    }
}   