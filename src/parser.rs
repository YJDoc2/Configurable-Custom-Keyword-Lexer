// auto-generated: "lalrpop 0.19.6"
// sha3: 7f49aa78ef86474cdddb22be73951af98126d141b6ddcfc60a72248d47214f
use crate::lexer;
use crate::tokens;
use crate::config::LangConfig;
use crate::ast::*;
use tokens::Token::*;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__program {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use crate::lexer;
    use crate::tokens;
    use crate::config::LangConfig;
    use crate::ast::*;
    use tokens::Token::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<>
     {
        Variant0(tokens::Token),
        Variant1(core::option::Option<tokens::Token>),
        Variant2(Expr),
        Variant3(alloc::vec::Vec<Expr>),
        Variant4(AST),
        Variant5(Vec<Expr>),
        Variant6(Stmt),
        Variant7(Block),
        Variant8(core::option::Option<Block>),
        Variant9(Condition),
        Variant10(Vec<Stmt>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 87, 0, 0, 88, 0, 89, 0, 0, 90, 0, 0, 0, 91,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 87, 0, 0, 88, 0, 89, 0, 0, 90, 0, 0, 0, 91,
        // State 2
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 3
        9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 4
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 5
        9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 8
        9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 9
        9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 10
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 11
        9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 17
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 18
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 19
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 20
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 21
        9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 24
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 25
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 26
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 27
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 28
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 29
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 87, 0, 0, 88, 0, 89, 0, 0, 90, 0, 0, 0, 91,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 18, 54, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -100, 55, 56, 0, 0, 0, 0, -100, -100, 0, 0, -100, 0, -100, 0, 0, -100, 0, 0, 0, -100,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 86, 87, 0, 0, 88, 0, 89, 0, 0, 90, 0, 0, 0, 91,
        // State 53
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -84, 0, 0, 0, 0, 0, 0, -84, -84, 0, 0, -84, 0, -84, 0, 0, -84, 0, 0, 0, -84,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -92, 66, 0, 0, 0, 0, 0, -92, -92, 0, 0, -92, 0, -92, 0, 0, -92, 0, 0, 0, -92,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -98, 67, 68, 0, 0, 0, 0, -98, -98, 0, 0, -98, 0, -98, 0, 0, -98, 0, 0, 0, -98,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -96, 69, 70, 0, 0, 0, 0, -96, -96, 0, 0, -96, 0, -96, 0, 0, -96, 0, 0, 0, -96,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 111, 0, 0, 112, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -76, 0, 0, 0, 0, 0, 0, -76, -76, 0, 0, -76, 0, -76, 0, 0, -76, 0, 0, 0, -76,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -82, 0, 0, 0, 0, 0, 0, -82, -82, 0, 0, -82, 0, -82, 0, 0, -82, 0, 0, 0, -82,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -90, 73, 0, 0, 0, 0, 0, -90, -90, 0, 0, -90, 0, -90, 0, 0, -90, 0, 0, 0, -90,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -80, 0, 0, 0, 0, 0, 0, -80, -80, 0, 0, -80, 0, -80, 0, 0, -80, 0, 0, 0, -80,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -88, 74, 0, 0, 0, 0, 0, -88, -88, 0, 0, -88, 0, -88, 0, 0, -88, 0, 0, 0, -88,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -94, 75, 76, 0, 0, 0, 0, -94, -94, 0, 0, -94, 0, -94, 0, 0, -94, 0, 0, 0, -94,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -74, 0, 0, 0, 0, 0, 0, -74, -74, 0, 0, -74, 0, -74, 0, 0, -74, 0, 0, 0, -74,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -72, 0, 0, 0, 0, 0, 0, -72, -72, 0, 0, -72, 0, -72, 0, 0, -72, 0, 0, 0, -72,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -78, 0, 0, 0, 0, 0, 0, -78, -78, 0, 0, -78, 0, -78, 0, 0, -78, 0, 0, 0, -78,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -86, 77, 0, 0, 0, 0, 0, -86, -86, 0, 0, -86, 0, -86, 0, 0, -86, 0, 0, 0, -86,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, -70, 0, 0, 0, 0, 0, 0, -70, -70, 0, 0, -70, 0, -70, 0, 0, -70, 0, 0, 0, -70,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, -115, -115, 0, 0, -115, 0, -115, 0, 0, -115, 0, 0, 0, -115,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, -113, -113, 0, 0, -113, 0, -113, 0, 0, -113, 0, 0, 0, -113,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, -111, -111, 0, 0, -111, 0, -111, 0, 0, -111, 0, 0, 0, -111,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, -110, -110, 0, 0, -110, 0, -110, 0, 0, -110, 0, 0, 0, -110,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, -108, -108, 0, 0, -108, 0, -108, 0, 0, -108, 0, 0, 0, -108,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, 0, 0, -116, -116, 0, 0, -116, 0, -116, 0, 0, -116, 0, 0, 0, -116,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 0, 0, -112, -112, 0, 0, -112, 0, -112, 0, 0, -112, 0, 0, 0, -112,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, 0, 0, -114, -114, 0, 0, -114, 0, -114, 0, 0, -114, 0, 0, 0, -114,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, -109, -109, 0, 0, -109, 0, -109, 0, 0, -109, 0, 0, 0, -109,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, 0, 0, -107, -107, 0, 0, -107, 0, -107, 0, 0, -107, 0, 0, 0, -107,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, -117, -117, 0, 0, -117, 0, -117, 0, 0, -117, 0, 0, 0, -117,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 103, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 120, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 18, 0, 19, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, -33, -33, 0, 0, -33, 0, -33, 0, 0, -33, 0, 0, 0, -33,
        // State 104
        0, -48, -48, 0, -48, 20, -48, -48, -48, 21, -48, -48, -48, 0, -48, -48, -48, 0, -48, 0, -48, -48, 0, 0, 0, 0, 0, 0, -48, -48, 0, 0, -48, 0, -48, 0, 0, -48, 0, 0, 0, -48,
        // State 105
        0, -122, -122, 0, -122, -122, -122, -122, -122, -122, -122, -122, -122, 0, -122, -122, -122, 0, -122, 0, -122, -122, 0, 0, 0, 0, 0, 0, -122, -122, 0, 0, -122, 0, -122, 0, 0, -122, 0, 0, 0, -122,
        // State 106
        0, -121, -121, 0, -121, -121, -121, -121, -121, -121, -121, -121, -121, 0, -121, -121, -121, 0, -121, 0, -121, -121, 0, 0, 0, 0, 0, 0, -121, -121, 0, 0, -121, 0, -121, 0, 0, -121, 0, 0, 0, -121,
        // State 107
        0, -123, -123, 0, -123, -123, -123, -123, -123, -123, -123, -123, -123, 0, -123, -123, -123, 0, -123, 0, -123, -123, 0, 0, 0, 0, 0, 0, -123, -123, 0, 0, -123, 0, -123, 0, 0, -123, 0, 0, 0, -123,
        // State 108
        0, -51, -51, 0, -51, -51, -51, -51, -51, -51, -51, -51, -51, 0, -51, -51, -51, 0, -51, 0, -51, -51, 0, 0, 0, 0, 0, 0, -51, -51, 0, 0, -51, 0, -51, 0, 0, -51, 0, 0, 0, -51,
        // State 109
        0, -68, -68, 0, -68, -68, -68, -68, -68, -68, -68, -68, -68, 0, -68, -68, -68, 0, -68, 0, -68, -68, 0, 0, 0, 0, 0, 0, -68, -68, 0, 0, -68, 0, -68, 0, 0, -68, 0, 0, 0, -68,
        // State 110
        0, -102, -102, 0, -102, -102, -102, -102, -102, -102, -102, -102, -102, 0, -102, -102, -102, 0, -102, 0, -102, -102, 0, 0, 0, 0, 0, 0, -102, -102, 0, 0, -102, 0, -102, 0, 0, -102, 0, 0, 0, -102,
        // State 111
        0, -118, -118, 0, -118, -118, -118, -118, -118, -118, -118, -118, -118, 0, -118, -118, -118, 0, -118, 0, -118, -118, 0, 0, 0, 0, 0, 0, -118, -118, 0, 0, -118, 0, -118, 0, 0, -118, 0, 0, 0, -118,
        // State 112
        0, 0, -119, 0, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 113
        0, 0, 22, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 25, 0, 0, 0, 0, 18, 0, 19, 0, 0, 26, 27, 0, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, -45, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 126, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 22, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 134, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, 0, -120, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 22, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 18, 0, 19, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, -101, -101, 0, 0, -101, 0, -101, 0, 0, -101, 0, 0, 0, -101,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, -105, -105, 0, 0, -105, 0, -105, 0, 143, -105, 0, 0, 0, -105,
        // State 126
        0, 0, 22, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, -67, -67, 0, 0, -67, 0, -67, 0, 0, -67, 0, 0, 0, -67,
        // State 129
        0, -46, -46, 0, -46, 20, -46, -46, -46, 21, -46, -46, -46, 0, -46, -46, -46, 0, -46, 0, -46, -46, 0, 0, 0, 0, 0, 0, -46, -46, 0, 0, -46, 0, -46, 0, 0, -46, 0, 0, 0, -46,
        // State 130
        0, -47, -47, 0, -47, 20, -47, -47, -47, 21, -47, -47, -47, 0, -47, -47, -47, 0, -47, 0, -47, -47, 0, 0, 0, 0, 0, 0, -47, -47, 0, 0, -47, 0, -47, 0, 0, -47, 0, 0, 0, -47,
        // State 131
        0, -49, -49, 0, -49, -49, -49, -49, -49, -49, -49, -49, -49, 0, -49, -49, -49, 0, -49, 0, -49, -49, 0, 0, 0, 0, 0, 0, -49, -49, 0, 0, -49, 0, -49, 0, 0, -49, 0, 0, 0, -49,
        // State 132
        0, -50, -50, 0, -50, -50, -50, -50, -50, -50, -50, -50, -50, 0, -50, -50, -50, 0, -50, 0, -50, -50, 0, 0, 0, 0, 0, 0, -50, -50, 0, 0, -50, 0, -50, 0, 0, -50, 0, 0, 0, -50,
        // State 133
        0, -103, -103, 0, -103, -103, -103, -103, -103, -103, -103, -103, -103, 0, -103, -103, -103, 0, -103, 0, -103, -103, 0, 0, 0, 0, 0, 0, -103, -103, 0, 0, -103, 0, -103, 0, 0, -103, 0, 0, 0, -103,
        // State 134
        0, 0, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, -41, 0, -41, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, -37, 0, -37, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, -39, 0, -39, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 0, -42, 0, -42, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, -38, 0, -38, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, -40, 0, -40, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, -104, -104, 0, 0, -104, 0, -104, 0, 0, -104, 0, 0, 0, -104,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, -127, -127, 0, 0, -127, 0, -127, 0, 0, -127, 0, 0, 0, -127,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, -59, -59, 0, 0, -59, 0, -59, 0, 0, -59, 0, 0, 0, -59,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, -63, -63, 0, 0, -63, 0, -63, 0, 0, -63, 0, 0, 0, -63,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, -65, -65, 0, 0, -65, 0, -65, 0, 0, -65, 0, 0, 0, -65,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, -66, -66, 0, 0, -66, 0, -66, 0, 0, -66, 0, 0, 0, -66,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, -99, -99, 0, 0, -99, 0, -99, 0, 0, -99, 0, 0, 0, -99,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, -126, -126, 0, 0, -126, 0, -126, 0, 0, -126, 0, 0, 0, -126,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, -125, -125, 0, 0, -125, 0, -125, 0, 0, -125, 0, 0, 0, -125,
        // State 153
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, -55, -55, 0, 0, -55, 0, -55, 0, 0, -55, 0, 0, 0, -55,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, -57, -57, 0, 0, -57, 0, -57, 0, 0, -57, 0, 0, 0, -57,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, -58, -58, 0, 0, -58, 0, -58, 0, 0, -58, 0, 0, 0, -58,
        // State 156
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, -61, -61, 0, 0, -61, 0, -61, 0, 0, -61, 0, 0, 0, -61,
        // State 157
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, -62, 0, -62, 0, 0, -62, 0, 0, 0, -62,
        // State 158
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, -64, -64, 0, 0, -64, 0, -64, 0, 0, -64, 0, 0, 0, -64,
        // State 159
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, -34, -34, -34, 0, 0, 0, 0, -34, -34, 0, 0, -34, 0, -34, 0, 0, -34, 0, 0, 0, -34,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 161
        0, 0, 0, 0, 0, 0, 18, -6, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 162
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, -83, -83, 0, 0, -83, 0, -83, 0, 0, -83, 0, 0, 0, -83,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, -91, -91, 0, 0, -91, 0, -91, 0, 0, -91, 0, 0, 0, -91,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, -97, -97, 0, 0, -97, 0, -97, 0, 0, -97, 0, 0, 0, -97,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, -95, -95, 0, 0, -95, 0, -95, 0, 0, -95, 0, 0, 0, -95,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, -124, -124, 0, 0, -124, 0, -124, 0, 0, -124, 0, 0, 0, -124,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, -53, -53, 0, 0, -53, 0, -53, 0, 0, -53, 0, 0, 0, -53,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, -54, -54, 0, 0, -54, 0, -54, 0, 0, -54, 0, 0, 0, -54,
        // State 169
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, -56, -56, 0, 0, -56, 0, -56, 0, 0, -56, 0, 0, 0, -56,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, -60, -60, 0, 0, -60, 0, -60, 0, 0, -60, 0, 0, 0, -60,
        // State 171
        0, 0, 0, 0, 0, 0, 18, -7, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, -75, -75, 0, 0, -75, 0, -75, 0, 0, -75, 0, 0, 0, -75,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, -81, -81, 0, 0, -81, 0, -81, 0, 0, -81, 0, 0, 0, -81,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, -89, -89, 0, 0, -89, 0, -89, 0, 0, -89, 0, 0, 0, -89,
        // State 175
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, -79, -79, 0, 0, -79, 0, -79, 0, 0, -79, 0, 0, 0, -79,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, -87, -87, 0, 0, -87, 0, -87, 0, 0, -87, 0, 0, 0, -87,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, -93, -93, 0, 0, -93, 0, -93, 0, 0, -93, 0, 0, 0, -93,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, -52, -52, 0, 0, -52, 0, -52, 0, 0, -52, 0, 0, 0, -52,
        // State 179
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, -73, -73, 0, 0, -73, 0, -73, 0, 0, -73, 0, 0, 0, -73,
        // State 180
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, -71, -71, 0, 0, -71, 0, -71, 0, 0, -71, 0, 0, 0, -71,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, -77, -77, 0, 0, -77, 0, -77, 0, 0, -77, 0, 0, 0, -77,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, -85, -85, 0, 0, -85, 0, -85, 0, 0, -85, 0, 0, 0, -85,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, -69, -69, 0, 0, -69, 0, -69, 0, 0, -69, 0, 0, 0, -69,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -106,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        -100,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        -84,
        // State 55
        -92,
        // State 56
        -98,
        // State 57
        -96,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        -76,
        // State 66
        -82,
        // State 67
        -90,
        // State 68
        -80,
        // State 69
        -88,
        // State 70
        -94,
        // State 71
        0,
        // State 72
        -74,
        // State 73
        -72,
        // State 74
        -78,
        // State 75
        -86,
        // State 76
        -70,
        // State 77
        -115,
        // State 78
        -113,
        // State 79
        -111,
        // State 80
        -110,
        // State 81
        -108,
        // State 82
        -30,
        // State 83
        -116,
        // State 84
        -112,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        -114,
        // State 92
        -109,
        // State 93
        -107,
        // State 94
        -117,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        -33,
        // State 104
        -48,
        // State 105
        -122,
        // State 106
        -121,
        // State 107
        -123,
        // State 108
        -51,
        // State 109
        -68,
        // State 110
        -102,
        // State 111
        -118,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        -101,
        // State 125
        -105,
        // State 126
        0,
        // State 127
        0,
        // State 128
        -67,
        // State 129
        -46,
        // State 130
        -47,
        // State 131
        -49,
        // State 132
        -50,
        // State 133
        -103,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        -104,
        // State 143
        -127,
        // State 144
        -59,
        // State 145
        -63,
        // State 146
        -65,
        // State 147
        -66,
        // State 148
        0,
        // State 149
        0,
        // State 150
        -99,
        // State 151
        -126,
        // State 152
        -125,
        // State 153
        -55,
        // State 154
        -57,
        // State 155
        -58,
        // State 156
        -61,
        // State 157
        -62,
        // State 158
        -64,
        // State 159
        -34,
        // State 160
        0,
        // State 161
        0,
        // State 162
        -83,
        // State 163
        -91,
        // State 164
        -97,
        // State 165
        -95,
        // State 166
        -124,
        // State 167
        -53,
        // State 168
        -54,
        // State 169
        -56,
        // State 170
        -60,
        // State 171
        0,
        // State 172
        -75,
        // State 173
        -81,
        // State 174
        -89,
        // State 175
        -79,
        // State 176
        -87,
        // State 177
        -93,
        // State 178
        -52,
        // State 179
        -73,
        // State 180
        -71,
        // State 181
        -77,
        // State 182
        -85,
        // State 183
        -69,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            3 => 148,
            16 => match state {
                12 => 33,
                13 => 35,
                14 => 36,
                31 => 46,
                32 => 47,
                34 => 49,
                45 => 60,
                _ => 15,
            },
            17 => 77,
            18 => match state {
                41 => 56,
                42 => 57,
                58 => 70,
                15 => 128,
                30 => 143,
                33 => 144,
                35 => 145,
                36 => 146,
                38 => 147,
                40 => 150,
                43 => 151,
                44 => 152,
                46 => 153,
                47 => 154,
                48 => 155,
                49 => 156,
                50 => 157,
                51 => 158,
                54 => 162,
                55 => 163,
                56 => 164,
                57 => 165,
                59 => 166,
                60 => 167,
                61 => 168,
                62 => 169,
                63 => 170,
                65 => 172,
                66 => 173,
                67 => 174,
                68 => 175,
                69 => 176,
                70 => 177,
                71 => 178,
                72 => 179,
                73 => 180,
                74 => 181,
                75 => 182,
                76 => 183,
                _ => 40,
            },
            20 => 112,
            21 => match state {
                5 => 117,
                9 => 123,
                11 => 126,
                _ => 113,
            },
            22 => match state {
                16 => 39,
                2 => 103,
                4 => 116,
                7 => 121,
                10 => 124,
                24 => 136,
                25 => 137,
                26 => 138,
                27 => 139,
                28 => 140,
                29 => 141,
                53 => 161,
                64 => 171,
                _ => 114,
            },
            23 => match state {
                17 => 129,
                18 => 130,
                _ => 104,
            },
            24 => 78,
            25 => 105,
            26 => 79,
            27 => 80,
            28 => 106,
            29 => 81,
            30 => 82,
            31 => match state {
                1 | 52 => 94,
                _ => 83,
            },
            32 => match state {
                37 => 52,
                _ => 1,
            },
            33 => 107,
            34 => match state {
                8 => 122,
                21 => 134,
                23 => 135,
                _ => 115,
            },
            35 => match state {
                19 => 131,
                20 => 132,
                _ => 108,
            },
            36 => 84,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""/""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""[""###,
            r###""]""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"ElseAux1"###,
            r###"ElseStart"###,
            r###"ForAux1"###,
            r###"ForAux2"###,
            r###"ForAux3"###,
            r###"ForAux4"###,
            r###"ForStart"###,
            r###"ID"###,
            r###"IfAux1"###,
            r###"IfAux2"###,
            r###"IfStart"###,
            r###"In"###,
            r###"LetStart"###,
            r###"Num"###,
            r###"PrintEnd"###,
            r###"PrintStart"###,
            r###"StrLit"###,
            r###"WhileAux1"###,
            r###"WhileAux2"###,
            r###"WhileStart"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'__0>
    where 
    {
        lc: &'__0 LangConfig,
        __phantom: core::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = usize;
        type Error = lexer::LexerError;
        type Token = tokens::Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = AST;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.lc,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &tokens::Token,
        _: core::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Not if true => Some(0),
            NotEq if true => Some(1),
            And if true => Some(2),
            OpenRoundBrack if true => Some(3),
            CloseRoundBrack if true => Some(4),
            Mul if true => Some(5),
            Plus if true => Some(6),
            Comma if true => Some(7),
            Minus if true => Some(8),
            Div if true => Some(9),
            SemiColon if true => Some(10),
            LessThan if true => Some(11),
            LessThanEq if true => Some(12),
            Eq if true => Some(13),
            EqEq if true => Some(14),
            GreaterThan if true => Some(15),
            GreaterThanEq if true => Some(16),
            OpenSquareBrack if true => Some(17),
            CloseSquareBrack if true => Some(18),
            OpenCurlyBrack if true => Some(19),
            Or if true => Some(20),
            CloseCurlyBrack if true => Some(21),
            ElseAux1 if true => Some(22),
            ElseStart if true => Some(23),
            ForAux1 if true => Some(24),
            ForAux2 if true => Some(25),
            ForAux3 if true => Some(26),
            ForAux4 if true => Some(27),
            ForStart if true => Some(28),
            ID(_) if true => Some(29),
            IfAux1 if true => Some(30),
            IfAux2 if true => Some(31),
            IfStart if true => Some(32),
            In if true => Some(33),
            LetStart if true => Some(34),
            Number(_) if true => Some(35),
            PrintEnd if true => Some(36),
            PrintStart if true => Some(37),
            StringVal(_) if true => Some(38),
            WhileAux1 if true => Some(39),
            WhileAux2 if true => Some(40),
            WhileStart if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: tokens::Token,
        _: core::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct programParser {
        _priv: (),
    }

    impl programParser {
        pub fn new() -> programParser {
            programParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            lc: &LangConfig,
            __tokens0: __TOKENS,
        ) -> Result<AST, __lalrpop_util::ParseError<usize, tokens::Token, lexer::LexerError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    lc,
                    __phantom: core::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        lc: &LangConfig,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> Option<Result<AST,__lalrpop_util::ParseError<usize, tokens::Token, lexer::LexerError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            28 => {
                __reduce28(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            29 => {
                // __program = program => ActionFn(0);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(lc, __sym0);
                return Some(Ok(__nt));
            }
            30 => {
                __reduce30(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            31 => {
                __reduce31(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            98 => {
                __reduce98(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            99 => {
                __reduce99(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            101 => {
                __reduce101(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            102 => {
                __reduce102(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            103 => {
                __reduce103(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(lc, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, AST, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Block, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Condition, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Expr, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Stmt, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Stmt>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, core::option::Option<Block>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, core::option::Option<tokens::Token>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, tokens::Token, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ";"? = ";" => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ";"? =  => ActionFn(70);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action70::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("," <expr>) = ",", expr => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action44::<>(lc, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("," <expr>)* =  => ActionFn(42);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action42::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 2)
    }
    pub(crate) fn __reduce4<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("," <expr>)* = ("," <expr>)+ => ActionFn(43);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce5<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("," <expr>)+ = ",", expr => ActionFn(79);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action79::<>(lc, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("," <expr>)+ = ("," <expr>)+, ",", expr => ActionFn(80);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action80::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 3)
    }
    pub(crate) fn __reduce7<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ElseAux1? = ElseAux1 => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ElseAux1? =  => ActionFn(50);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action50::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce9<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ElseStart? = ElseStart => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce10<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ElseStart? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce11<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux1? = ForAux1 => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce12<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux1? =  => ActionFn(68);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action68::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce13<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux2? = ForAux2 => ActionFn(65);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce14<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux2? =  => ActionFn(66);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action66::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce15<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux3? = ForAux3 => ActionFn(63);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce16<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux3? =  => ActionFn(64);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action64::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce17<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux4? = ForAux4 => ActionFn(61);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ForAux4? =  => ActionFn(62);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action62::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce19<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // IfAux1? = IfAux1 => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce20<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // IfAux1? =  => ActionFn(56);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action56::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce21<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // IfAux2? = IfAux2 => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // IfAux2? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce23<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // PrintEnd? = PrintEnd => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce24<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // PrintEnd? =  => ActionFn(46);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action46::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce25<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WhileAux1? = WhileAux1 => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce26<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WhileAux1? =  => ActionFn(60);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action60::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce27<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WhileAux2? = WhileAux2 => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce28<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WhileAux2? =  => ActionFn(58);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action58::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 14)
    }
    pub(crate) fn __reduce30<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // array = "[", expr, "]" => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce31<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // array = "[", expr, ("," <expr>)+, "]" => ActionFn(82);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action82::<>(lc, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (4, 16)
    }
    pub(crate) fn __reduce32<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // assign_stmt = ID, "=", expr => ActionFn(13);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action13::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce33<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // block = "{", stmts, "}" => ActionFn(2);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action2::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce34<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // block? = block => ActionFn(47);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce35<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // block? =  => ActionFn(48);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action48::<>(lc, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce36<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // comparison = expr, "<", expr => ActionFn(22);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action22::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce37<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // comparison = expr, ">", expr => ActionFn(23);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action23::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce38<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // comparison = expr, "<=", expr => ActionFn(24);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action24::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce39<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // comparison = expr, ">=", expr => ActionFn(25);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action25::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce40<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // comparison = expr, "!=", expr => ActionFn(26);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action26::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce41<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // comparison = expr, "==", expr => ActionFn(27);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action27::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce42<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // condition = condition, "&&", unary_condition => ActionFn(17);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action17::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce43<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // condition = condition, "||", unary_condition => ActionFn(18);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action18::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce44<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // condition = unary_condition => ActionFn(19);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce45<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // expr = expr, "+", factor => ActionFn(28);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action28::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce46<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // expr = expr, "-", factor => ActionFn(29);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action29::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce47<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // expr = factor => ActionFn(30);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce48<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // factor = factor, "*", value => ActionFn(31);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action31::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce49<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // factor = factor, "/", value => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce50<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // factor = value => ActionFn(33);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce51<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, ForAux2, ForAux3, In, array, ForAux4, block => ActionFn(103);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant7(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant5(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action103::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (9, 24)
    }
    pub(crate) fn __reduce52<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, ForAux2, ForAux3, In, array, block => ActionFn(104);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant5(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action104::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 24)
    }
    pub(crate) fn __reduce53<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, ForAux2, In, array, ForAux4, block => ActionFn(105);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant5(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action105::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 24)
    }
    pub(crate) fn __reduce54<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, ForAux2, In, array, block => ActionFn(106);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant5(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action106::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 24)
    }
    pub(crate) fn __reduce55<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, ForAux3, In, array, ForAux4, block => ActionFn(107);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant5(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action107::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 24)
    }
    pub(crate) fn __reduce56<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, ForAux3, In, array, block => ActionFn(108);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant5(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action108::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 24)
    }
    pub(crate) fn __reduce57<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, In, array, ForAux4, block => ActionFn(109);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action109::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 24)
    }
    pub(crate) fn __reduce58<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ForAux1, ID, In, array, block => ActionFn(110);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action110::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 24)
    }
    pub(crate) fn __reduce59<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, ForAux2, ForAux3, In, array, ForAux4, block => ActionFn(111);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant5(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action111::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 24)
    }
    pub(crate) fn __reduce60<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, ForAux2, ForAux3, In, array, block => ActionFn(112);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant5(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action112::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 24)
    }
    pub(crate) fn __reduce61<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, ForAux2, In, array, ForAux4, block => ActionFn(113);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action113::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 24)
    }
    pub(crate) fn __reduce62<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, ForAux2, In, array, block => ActionFn(114);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action114::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 24)
    }
    pub(crate) fn __reduce63<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, ForAux3, In, array, ForAux4, block => ActionFn(115);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action115::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 24)
    }
    pub(crate) fn __reduce64<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, ForAux3, In, array, block => ActionFn(116);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action116::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 24)
    }
    pub(crate) fn __reduce65<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, In, array, ForAux4, block => ActionFn(117);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action117::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 24)
    }
    pub(crate) fn __reduce66<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // for_stmt = ForStart, ID, In, array, block => ActionFn(118);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action118::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 24)
    }
    pub(crate) fn __reduce67<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // id = ID => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce68<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block, ElseStart, ElseAux1, block => ActionFn(151);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant7(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action151::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (10, 26)
    }
    pub(crate) fn __reduce69<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block, ElseStart, ElseAux1 => ActionFn(152);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action152::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (9, 26)
    }
    pub(crate) fn __reduce70<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block, ElseStart, ElseAux1, block => ActionFn(153);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant7(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action153::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (9, 26)
    }
    pub(crate) fn __reduce71<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block, ElseStart, ElseAux1 => ActionFn(154);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action154::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce72<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block, ElseStart, ElseAux1, block => ActionFn(155);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant7(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action155::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (9, 26)
    }
    pub(crate) fn __reduce73<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block, ElseStart, ElseAux1 => ActionFn(156);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action156::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce74<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block, ElseStart, ElseAux1, block => ActionFn(157);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action157::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce75<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block, ElseStart, ElseAux1 => ActionFn(158);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action158::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce76<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block, ElseAux1, block => ActionFn(159);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant7(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action159::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (9, 26)
    }
    pub(crate) fn __reduce77<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block, ElseAux1 => ActionFn(160);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action160::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce78<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block, ElseAux1, block => ActionFn(161);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action161::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce79<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block, ElseAux1 => ActionFn(162);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action162::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce80<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block, ElseAux1, block => ActionFn(163);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action163::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce81<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block, ElseAux1 => ActionFn(164);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action164::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce82<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block, ElseAux1, block => ActionFn(165);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action165::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce83<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block, ElseAux1 => ActionFn(166);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action166::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 26)
    }
    pub(crate) fn __reduce84<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block, ElseStart, block => ActionFn(167);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant7(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action167::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (9, 26)
    }
    pub(crate) fn __reduce85<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block, ElseStart => ActionFn(168);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action168::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce86<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block, ElseStart, block => ActionFn(169);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action169::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce87<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block, ElseStart => ActionFn(170);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action170::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce88<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block, ElseStart, block => ActionFn(171);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action171::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce89<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block, ElseStart => ActionFn(172);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action172::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce90<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block, ElseStart, block => ActionFn(173);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action173::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce91<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block, ElseStart => ActionFn(174);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action174::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 26)
    }
    pub(crate) fn __reduce92<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block, block => ActionFn(175);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant7(__symbols);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action175::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (8, 26)
    }
    pub(crate) fn __reduce93<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", IfAux2, block => ActionFn(176);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action176::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce94<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block, block => ActionFn(177);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action177::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce95<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, IfAux1, "(", condition, ")", block => ActionFn(178);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action178::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 26)
    }
    pub(crate) fn __reduce96<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block, block => ActionFn(179);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action179::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 26)
    }
    pub(crate) fn __reduce97<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", IfAux2, block => ActionFn(180);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action180::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 26)
    }
    pub(crate) fn __reduce98<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block, block => ActionFn(181);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action181::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 26)
    }
    pub(crate) fn __reduce99<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // if_stmt = IfStart, "(", condition, ")", block => ActionFn(182);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action182::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 26)
    }
    pub(crate) fn __reduce100<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // let_stmt = LetStart, ID, "=", expr => ActionFn(16);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action16::<>(lc, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 27)
    }
    pub(crate) fn __reduce101<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // num = Num => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce102<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // num = "(", expr, ")" => ActionFn(41);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action41::<>(lc, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce103<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // print_stmt = PrintStart, "(", expr, ")", PrintEnd => ActionFn(143);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action143::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 29)
    }
    pub(crate) fn __reduce104<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // print_stmt = PrintStart, "(", expr, ")" => ActionFn(144);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action144::<>(lc, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 29)
    }
    pub(crate) fn __reduce105<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // program = stmts => ActionFn(1);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce106<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = print_stmt, ";" => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(lc, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce107<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = print_stmt => ActionFn(74);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce108<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = let_stmt, ";" => ActionFn(75);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action75::<>(lc, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce109<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = let_stmt => ActionFn(76);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce110<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = if_stmt => ActionFn(5);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce111<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = while_stmt => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce112<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = for_stmt => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce113<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = assign_stmt, ";" => ActionFn(77);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action77::<>(lc, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce114<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmt = assign_stmt => ActionFn(78);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce115<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmts = stmt => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce116<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // stmts = stmts, stmt => ActionFn(10);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action10::<>(lc, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce117<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // str_lit = StrLit => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce118<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // unary_condition = comparison => ActionFn(20);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce119<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // unary_condition = "!", unary_condition => ActionFn(21);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action21::<>(lc, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 34)
    }
    pub(crate) fn __reduce120<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // value = num => ActionFn(34);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action34::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce121<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // value = id => ActionFn(35);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce122<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // value = str_lit => ActionFn(36);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(lc, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce123<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // while_stmt = WhileStart, WhileAux1, "(", condition, ")", WhileAux2, block => ActionFn(147);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant7(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action147::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (7, 36)
    }
    pub(crate) fn __reduce124<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // while_stmt = WhileStart, WhileAux1, "(", condition, ")", block => ActionFn(148);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action148::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 36)
    }
    pub(crate) fn __reduce125<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // while_stmt = WhileStart, "(", condition, ")", WhileAux2, block => ActionFn(149);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action149::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (6, 36)
    }
    pub(crate) fn __reduce126<
    >(
        lc: &LangConfig,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // while_stmt = WhileStart, "(", condition, ")", block => ActionFn(150);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant7(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action150::<>(lc, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 36)
    }
}
pub use self::__parse__program::programParser;

#[allow(unused_variables)]
fn __action0<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, AST, usize),
) -> AST
{
    __0
}

#[allow(unused_variables)]
fn __action1<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Vec<Stmt>, usize),
) -> AST
{
    AST{top_block:Block{stmts:__0}}
}

#[allow(unused_variables)]
fn __action2<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, __0, _): (usize, Vec<Stmt>, usize),
    (_, _, _): (usize, tokens::Token, usize),
) -> Block
{
    Block{stmts:__0}
}

#[allow(unused_variables)]
fn __action3<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Stmt, usize),
    (_, _, _): (usize, core::option::Option<tokens::Token>, usize),
) -> Stmt
{
    __0
}

#[allow(unused_variables)]
fn __action4<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Stmt, usize),
    (_, _, _): (usize, core::option::Option<tokens::Token>, usize),
) -> Stmt
{
    __0
}

#[allow(unused_variables)]
fn __action5<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Stmt, usize),
) -> Stmt
{
    __0
}

#[allow(unused_variables)]
fn __action6<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Stmt, usize),
) -> Stmt
{
    __0
}

#[allow(unused_variables)]
fn __action7<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Stmt, usize),
) -> Stmt
{
    __0
}

#[allow(unused_variables)]
fn __action8<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Stmt, usize),
    (_, _, _): (usize, core::option::Option<tokens::Token>, usize),
) -> Stmt
{
    __0
}

#[allow(unused_variables)]
fn __action9<
>(
    lc: &LangConfig,
    (_, s, _): (usize, Stmt, usize),
) -> Vec<Stmt>
{
    vec![s]
}

#[allow(unused_variables)]
fn __action10<
>(
    lc: &LangConfig,
    (_, mut s, _): (usize, Vec<Stmt>, usize),
    (_, n, _): (usize, Stmt, usize),
) -> Vec<Stmt>
{
    {s.push(n);s}
}

#[allow(unused_variables)]
fn __action11<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, fa1, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, name, _): (usize, tokens::Token, usize),
    (_, fa2, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, fa3, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, a, _): (usize, Vec<Expr>, usize),
    (_, fa4, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, b, _): (usize, Block, usize),
) -> Stmt
{
    {
        if !lc.is_optional(ForAux1) && fa1.is_none(){
            panic!("Error, for aux 1 required");
        }
        if !lc.is_optional(ForAux2) && fa2.is_none(){
            panic!("Error, for aux 2 required");
        }
        if !lc.is_optional(ForAux3) && fa3.is_none(){
            panic!("Error, for aux 3 required");
        }
        if !lc.is_optional(ForAux4) && fa4.is_none(){
            panic!("Error, for aux 4 required");
        }
        if let ID(name)=name{
            Stmt::For(For{iter_var:name,array:a,blk:b})
        }else{
            unreachable!();
        }
        
    }
}

#[allow(unused_variables)]
fn __action12<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, wa1, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, c, _): (usize, Condition, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, wa2, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, b, _): (usize, Block, usize),
) -> Stmt
{
    {
        if !lc.is_optional(WhileAux1) && wa1.is_none(){
            panic!("Error, while aux 1 required");
        }
        if !lc.is_optional(WhileAux2) && wa2.is_none(){
            panic!("Error, while aux 2 required");
        }
        Stmt::While(While{cond:c,block:b})
    }
}

#[allow(unused_variables)]
fn __action13<
>(
    lc: &LangConfig,
    (_, name, _): (usize, tokens::Token, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e, _): (usize, Expr, usize),
) -> Stmt
{
    {
        if let ID(name) = name{
            Stmt::Assign(Assign{id:name,value:e})
        }else{
            unreachable!();
        }
    }
}

#[allow(unused_variables)]
fn __action14<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, ifa1, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, c, _): (usize, Condition, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, ifa2, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, b1, _): (usize, Block, usize),
    (_, els, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, ea1, _): (usize, core::option::Option<tokens::Token>, usize),
    (_, b2, _): (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    {
        if !lc.is_optional(IfAux1) && ifa1.is_none(){
            panic!("Error, if aux 1 required");
        }
        if !lc.is_optional(IfAux2) && ifa2.is_none(){
            panic!("Error, if aux 2 required");
        }
        
        // else section
        let else_blk;

        if els.is_some(){
            if !lc.is_optional(ElseAux1) && ea1.is_none(){
                panic!("Error, else aux 1 required");
            }
            if b2.is_none(){
                panic!("A block is required for else statements");
            }
            else_blk = b2.unwrap();
        }else{
            else_blk = Block{stmts:vec![]};
        }
        return Stmt::If(IfStmt{cond:c,if_blk:b1,else_blk:else_blk});
    }
}

#[allow(unused_variables)]
fn __action15<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, v, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e, _): (usize, core::option::Option<tokens::Token>, usize),
) -> Stmt
{
    {
        if !lc.is_optional(PrintEnd) && e.is_none(){
            panic!("Error, print end required");
        }
        return Stmt::Print(PrintStmt{arg:v});
    }
}

#[allow(unused_variables)]
fn __action16<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, name, _): (usize, tokens::Token, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, v, _): (usize, Expr, usize),
) -> Stmt
{
    {
        if let ID(name) = name{
            return Stmt::Decl(Decl{name:name,value:v});
        }else{
            unreachable!();
        }
        
    }
}

#[allow(unused_variables)]
fn __action17<
>(
    lc: &LangConfig,
    (_, c1, _): (usize, Condition, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, c2, _): (usize, Condition, usize),
) -> Condition
{
    Condition::LogicalOp(Box::new(c1),LogicalOp::And,Box::new(c2))
}

#[allow(unused_variables)]
fn __action18<
>(
    lc: &LangConfig,
    (_, c1, _): (usize, Condition, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, c2, _): (usize, Condition, usize),
) -> Condition
{
    Condition::LogicalOp(Box::new(c1),LogicalOp::Or,Box::new(c2))
}

#[allow(unused_variables)]
fn __action19<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Condition, usize),
) -> Condition
{
    __0
}

#[allow(unused_variables)]
fn __action20<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Condition, usize),
) -> Condition
{
    __0
}

#[allow(unused_variables)]
fn __action21<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, c, _): (usize, Condition, usize),
) -> Condition
{
    Condition::Not(Box::new(c))
}

#[allow(unused_variables)]
fn __action22<
>(
    lc: &LangConfig,
    (_, e1, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e2, _): (usize, Expr, usize),
) -> Condition
{
    Condition::Comparison(e1,ComparisonOp::LT,e2)
}

#[allow(unused_variables)]
fn __action23<
>(
    lc: &LangConfig,
    (_, e1, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e2, _): (usize, Expr, usize),
) -> Condition
{
    Condition::Comparison(e1,ComparisonOp::GT,e2)
}

#[allow(unused_variables)]
fn __action24<
>(
    lc: &LangConfig,
    (_, e1, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e2, _): (usize, Expr, usize),
) -> Condition
{
    Condition::Comparison(e1,ComparisonOp::LTE,e2)
}

#[allow(unused_variables)]
fn __action25<
>(
    lc: &LangConfig,
    (_, e1, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e2, _): (usize, Expr, usize),
) -> Condition
{
    Condition::Comparison(e1,ComparisonOp::GTE,e2)
}

#[allow(unused_variables)]
fn __action26<
>(
    lc: &LangConfig,
    (_, e1, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e2, _): (usize, Expr, usize),
) -> Condition
{
    Condition::Comparison(e1,ComparisonOp::NotEq,e2)
}

#[allow(unused_variables)]
fn __action27<
>(
    lc: &LangConfig,
    (_, e1, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, e2, _): (usize, Expr, usize),
) -> Condition
{
    Condition::Comparison(e1,ComparisonOp::Eq,e2)
}

#[allow(unused_variables)]
fn __action28<
>(
    lc: &LangConfig,
    (_, e, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, f, _): (usize, Expr, usize),
) -> Expr
{
    Expr::Op(Box::new(e),Operator::Add,Box::new(f))
}

#[allow(unused_variables)]
fn __action29<
>(
    lc: &LangConfig,
    (_, e, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, f, _): (usize, Expr, usize),
) -> Expr
{
    Expr::Op(Box::new(e),Operator::Sub,Box::new(f))
}

#[allow(unused_variables)]
fn __action30<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action31<
>(
    lc: &LangConfig,
    (_, f, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, n, _): (usize, Expr, usize),
) -> Expr
{
    Expr::Op(Box::new(f),Operator::Mul,Box::new(n))
}

#[allow(unused_variables)]
fn __action32<
>(
    lc: &LangConfig,
    (_, f, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
    (_, n, _): (usize, Expr, usize),
) -> Expr
{
    Expr::Op(Box::new(f),Operator::Div,Box::new(n))
}

#[allow(unused_variables)]
fn __action33<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action34<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action35<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action36<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action37<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, a1, _): (usize, Expr, usize),
    (_, a2, _): (usize, alloc::vec::Vec<Expr>, usize),
    (_, _, _): (usize, tokens::Token, usize),
) -> Vec<Expr>
{
    {
        let mut v = vec![a1];
        v.extend(a2);
        v
    }
}

#[allow(unused_variables)]
fn __action38<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> Expr
{
    {
        if let ID(t) = __0 {
            return Expr::Val(Value::Id(t));
        }else{
            return Expr::Val(Value::Id("".to_owned()));
        }
    }
}

#[allow(unused_variables)]
fn __action39<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> Expr
{
    {
        if let StringVal(t) = __0 {
            return Expr::Val(Value::Sval(t));
        }else{
            return Expr::Val(Value::Sval("".to_owned()));
        }
    }
}

#[allow(unused_variables)]
fn __action40<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> Expr
{
    {
        if let Number(t) = __0 {
            return Expr::Val(Value::Nval(t.parse().unwrap()));
        }else{
            return Expr::Val(Value::Nval(0.0));
        }
    }
}

#[allow(unused_variables)]
fn __action41<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, __0, _): (usize, Expr, usize),
    (_, _, _): (usize, tokens::Token, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action42<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Expr>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action43<
>(
    lc: &LangConfig,
    (_, v, _): (usize, alloc::vec::Vec<Expr>, usize),
) -> alloc::vec::Vec<Expr>
{
    v
}

#[allow(unused_variables)]
fn __action44<
>(
    lc: &LangConfig,
    (_, _, _): (usize, tokens::Token, usize),
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action45<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action46<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action47<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Block, usize),
) -> core::option::Option<Block>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action48<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Block>
{
    None
}

#[allow(unused_variables)]
fn __action49<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action50<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action51<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action52<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action53<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action54<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action55<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action56<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action57<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action58<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action59<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action60<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action61<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action62<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action63<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action64<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action65<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action66<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action67<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action68<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action69<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, tokens::Token, usize),
) -> core::option::Option<tokens::Token>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action70<
>(
    lc: &LangConfig,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<tokens::Token>
{
    None
}

#[allow(unused_variables)]
fn __action71<
>(
    lc: &LangConfig,
    (_, __0, _): (usize, Expr, usize),
) -> alloc::vec::Vec<Expr>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action72<
>(
    lc: &LangConfig,
    (_, v, _): (usize, alloc::vec::Vec<Expr>, usize),
    (_, e, _): (usize, Expr, usize),
) -> alloc::vec::Vec<Expr>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action73<
>(
    lc: &LangConfig,
    __0: (usize, Stmt, usize),
    __1: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action69(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        lc,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action74<
>(
    lc: &LangConfig,
    __0: (usize, Stmt, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action70(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        lc,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action75<
>(
    lc: &LangConfig,
    __0: (usize, Stmt, usize),
    __1: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action69(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action4(
        lc,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action76<
>(
    lc: &LangConfig,
    __0: (usize, Stmt, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action70(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action4(
        lc,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action77<
>(
    lc: &LangConfig,
    __0: (usize, Stmt, usize),
    __1: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action69(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        lc,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action78<
>(
    lc: &LangConfig,
    __0: (usize, Stmt, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action70(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        lc,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action79<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, Expr, usize),
) -> alloc::vec::Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action44(
        lc,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        lc,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action80<
>(
    lc: &LangConfig,
    __0: (usize, alloc::vec::Vec<Expr>, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Expr, usize),
) -> alloc::vec::Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action44(
        lc,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        lc,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action81<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, Expr, usize),
    __2: (usize, tokens::Token, usize),
) -> Vec<Expr>
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action42(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        lc,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action82<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, Expr, usize),
    __2: (usize, alloc::vec::Vec<Expr>, usize),
    __3: (usize, tokens::Token, usize),
) -> Vec<Expr>
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action43(
        lc,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        lc,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action83<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, core::option::Option<tokens::Token>, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, core::option::Option<tokens::Token>, usize),
    __8: (usize, tokens::Token, usize),
    __9: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __8.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action49(
        lc,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __9,
    )
}

#[allow(unused_variables)]
fn __action84<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, core::option::Option<tokens::Token>, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, core::option::Option<tokens::Token>, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __7.2.clone();
    let __end0 = __8.0.clone();
    let __temp0 = __action50(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
    )
}

#[allow(unused_variables)]
fn __action85<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, core::option::Option<tokens::Token>, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, tokens::Token, usize),
    __9: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action51(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
fn __action86<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, core::option::Option<tokens::Token>, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __7.0.clone();
    let __temp0 = __action52(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action87<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, core::option::Option<tokens::Token>, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action51(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action84(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __8,
    )
}

#[allow(unused_variables)]
fn __action88<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, core::option::Option<tokens::Token>, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __7.0.clone();
    let __temp0 = __action52(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action84(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
fn __action89<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, core::option::Option<tokens::Token>, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Vec<Expr>, usize),
    __7: (usize, core::option::Option<tokens::Token>, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action67(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        lc,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action90<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, core::option::Option<tokens::Token>, usize),
    __3: (usize, core::option::Option<tokens::Token>, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, core::option::Option<tokens::Token>, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action68(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        lc,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action91<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Vec<Expr>, usize),
    __7: (usize, core::option::Option<tokens::Token>, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action65(
        lc,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        lc,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action92<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, core::option::Option<tokens::Token>, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, core::option::Option<tokens::Token>, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action66(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        lc,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action93<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, core::option::Option<tokens::Token>, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, core::option::Option<tokens::Token>, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action65(
        lc,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        lc,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action94<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, core::option::Option<tokens::Token>, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action66(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        lc,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action95<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Vec<Expr>, usize),
    __7: (usize, core::option::Option<tokens::Token>, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action63(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action91(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action96<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, core::option::Option<tokens::Token>, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action64(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action91(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action97<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, core::option::Option<tokens::Token>, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action63(
        lc,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        lc,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action98<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action64(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        lc,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action99<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, core::option::Option<tokens::Token>, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action63(
        lc,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        lc,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action100<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action64(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        lc,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action101<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action63(
        lc,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        lc,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action102<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Vec<Expr>, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action64(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        lc,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action103<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Vec<Expr>, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action61(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __8,
    )
}

#[allow(unused_variables)]
fn __action104<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Vec<Expr>, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __7.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
fn __action105<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action61(
        lc,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
fn __action106<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __6.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action107<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action61(
        lc,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
fn __action108<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __6.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action109<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action61(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action98(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action110<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action98(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action111<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action61(
        lc,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action99(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
fn __action112<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Vec<Expr>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __6.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action99(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action113<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action61(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action114<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action115<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action61(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action101(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action116<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Vec<Expr>, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action101(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action117<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Vec<Expr>, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action61(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action102(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action118<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Vec<Expr>, usize),
    __4: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action62(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action102(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action119<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, tokens::Token, usize),
    __9: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action55(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        lc,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
fn __action120<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action56(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        lc,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action121<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action55(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        lc,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action122<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action56(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        lc,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action123<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action55(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        lc,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action124<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action56(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        lc,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action125<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action55(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        lc,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action126<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, Block, usize),
    __6: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action56(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        lc,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action127<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, tokens::Token, usize),
    __9: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action53(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
fn __action128<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action129<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action53(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action130<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action131<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action53(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action132<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action133<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action53(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action122(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action134<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action122(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action135<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action53(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action123(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action136<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action123(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action137<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action53(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action138<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action139<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action53(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action140<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action141<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action53(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action142<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, core::option::Option<Block>, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action54(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action143<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Expr, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action45(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action144<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Expr, usize),
    __3: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action46(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action145<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, core::option::Option<tokens::Token>, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action59(
        lc,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action12(
        lc,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action146<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, core::option::Option<tokens::Token>, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action60(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action12(
        lc,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action147<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action57(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action148<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action58(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action149<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action57(
        lc,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action150<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action58(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        lc,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action151<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, tokens::Token, usize),
    __9: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __9.0.clone();
    let __end0 = __9.2.clone();
    let __temp0 = __action47(
        lc,
        __9,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action152<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __8.2.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action153<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __8.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action47(
        lc,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action154<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __7.2.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action155<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __8.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action47(
        lc,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action129(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action156<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __7.2.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action129(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action157<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action47(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action158<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action159<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __8.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action47(
        lc,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action160<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __7.2.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action161<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action47(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action162<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action163<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action47(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action133(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action164<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action133(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action165<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action47(
        lc,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action166<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action167<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
    __8: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __8.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action47(
        lc,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action168<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __7.2.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action169<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action47(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action170<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action171<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action47(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action137(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action172<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action137(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action173<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action47(
        lc,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action174<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, tokens::Token, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action175<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
    __7: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action47(
        lc,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action139(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action176<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, tokens::Token, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action139(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action177<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action47(
        lc,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action178<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, tokens::Token, usize),
    __3: (usize, Condition, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action179<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
    __6: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action47(
        lc,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action141(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action180<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, tokens::Token, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action141(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action181<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
    __5: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action47(
        lc,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action182<
>(
    lc: &LangConfig,
    __0: (usize, tokens::Token, usize),
    __1: (usize, tokens::Token, usize),
    __2: (usize, Condition, usize),
    __3: (usize, tokens::Token, usize),
    __4: (usize, Block, usize),
) -> Stmt
{
    let __start0 = __4.2.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action48(
        lc,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        lc,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

pub trait __ToTriple<> {
    fn to_triple(value: Self) -> Result<(usize,tokens::Token,usize), __lalrpop_util::ParseError<usize, tokens::Token, lexer::LexerError>>;
}

impl<> __ToTriple<> for (usize, tokens::Token, usize) {
    fn to_triple(value: Self) -> Result<(usize,tokens::Token,usize), __lalrpop_util::ParseError<usize, tokens::Token, lexer::LexerError>> {
        Ok(value)
    }
}
impl<> __ToTriple<> for Result<(usize, tokens::Token, usize), lexer::LexerError> {
    fn to_triple(value: Self) -> Result<(usize,tokens::Token,usize), __lalrpop_util::ParseError<usize, tokens::Token, lexer::LexerError>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
